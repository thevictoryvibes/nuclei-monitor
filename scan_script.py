#!/usr/bin/env python3
import requests
import json
import os
import sys
from datetime import datetime

def main():
    # Configuration
    API_URL = os.environ.get('SCANNER_API_URL', '').rstrip('/')
    if not API_URL:
        print("ERROR: SCANNER_API_URL not set!")
        sys.exit(1)
    
    TIMESTAMP = datetime.utcnow().strftime('%Y%m%d_%H%M%S')
    DATE = datetime.utcnow().strftime('%Y%m%d')
    
    # Read URLs
    try:
        with open('websites.txt', 'r') as f:
            urls = [line.strip() for line in f if line.strip() and not line.startswith('#')]
    except FileNotFoundError:
        print("ERROR: websites.txt not found!")
        sys.exit(1)
    
    print(f'Scanning {len(urls)} URLs...')
    
    # Scan results
    all_results = []
    total_vulns = 0
    failed_scans = 0
    
    for idx, url in enumerate(urls, 1):
        print(f'[{idx}/{len(urls)}] Scanning: {url}')
        try:
            response = requests.post(
                f'{API_URL}/scan',
                json={'url': url, 'templates': 'takeovers/'},
                timeout=90
            )
            
            if response.status_code == 200:
                result = response.json()
                all_results.append(result)
                vuln_count = result.get('count', 0)
                total_vulns += vuln_count
                
                if vuln_count > 0:
                    print(f'  ⚠️  Found {vuln_count} vulnerabilities!')
                else:
                    print(f'  ✅ No vulnerabilities found')
            else:
                print(f'  ❌ Scan failed: HTTP {response.status_code}')
                failed_scans += 1
                all_results.append({
                    'success': False,
                    'url': url,
                    'error': f'HTTP {response.status_code}',
                    'count': 0
                })
        
        except Exception as e:
            print(f'  ❌ Error: {str(e)}')
            failed_scans += 1
            all_results.append({
                'success': False,
                'url': url,
                'error': str(e),
                'count': 0
            })
    
    # Create directories
    os.makedirs('results', exist_ok=True)
    os.makedirs('reports', exist_ok=True)
    
    # Save detailed results
    scan_file = f'results/scan_{TIMESTAMP}.json'
    with open(scan_file, 'w') as f:
        json.dump({
            'scan_time': datetime.utcnow().isoformat(),
            'total_urls': len(urls),
            'total_vulnerabilities': total_vulns,
            'failed_scans': failed_scans,
            'results': all_results
        }, f, indent=2)
    
    print(f'\n💾 Saved: {scan_file}')
    
    # Save latest summary
    with open('results/latest_summary.json', 'w') as f:
        json.dump({
            'last_scan': datetime.utcnow().isoformat(),
            'total_urls': len(urls),
            'total_vulnerabilities': total_vulns,
            'failed_scans': failed_scans,
            'status': 'vulnerable' if total_vulns > 0 else 'secure',
            'latest_file': scan_file
        }, f, indent=2)
    
    # Generate report
    with open('results/latest_summary.json', 'r') as f:
        summary = json.load(f)
    
    with open(summary['latest_file'], 'r') as f:
        details = json.load(f)
    
    report = f"""# Vulnerability Scan Report - {DATE}

## Summary
- **Scan Time:** {summary['last_scan']}
- **Total URLs:** {summary['total_urls']}
- **Vulnerabilities:** {summary['total_vulnerabilities']}
- **Failed Scans:** {summary['failed_scans']}
- **Status:** {'🔴 VULNERABLE' if summary['total_vulnerabilities'] > 0 else '🟢 SECURE'}

---

## Results

"""
    
    vulnerable = [r for r in details['results'] if r.get('success') and r.get('count', 0) > 0]
    secure = [r for r in details['results'] if r.get('success') and r.get('count', 0) == 0]
    failed = [r for r in details['results'] if not r.get('success')]
    
    if vulnerable:
        report += f'### ⚠️ Vulnerable URLs ({len(vulnerable)})\n\n'
        for r in vulnerable:
            report += f'- **{r["url"]}** - {r["count"]} vulnerabilities found\n'
        report += '\n'
    
    if secure:
        report += f'### ✅ Secure URLs ({len(secure)})\n\n'
        for r in secure:
            report += f'- {r["url"]}\n'
        report += '\n'
    
    if failed:
        report += f'### ❌ Failed Scans ({len(failed)})\n\n'
        for r in failed:
            report += f'- {r["url"]} - Error: {r.get("error", "Unknown")}\n'
        report += '\n'
    
    report += '---\n*Generated by Nuclei Monitoring System*\n'
    
    with open(f'reports/daily_report_{DATE}.md', 'w') as f:
        f.write(report)
    
    print(f'📄 Report saved: reports/daily_report_{DATE}.md')
    
    # Update status badge
    status = summary['status']
    vulns = summary['total_vulnerabilities']
    last_scan = datetime.fromisoformat(summary['last_scan']).strftime('%Y-%m-%d %H:%M UTC')
    badge = '🔴' if status == 'vulnerable' else '🟢'
    
    status_md = f"""# {badge} Monitoring Status

**Last Scan:** {last_scan}  
**Status:** {status.upper()}  
**Vulnerabilities:** {vulns}  
**Total URLs:** {summary['total_urls']}

---

[View Dashboard](https://thevictoryvibes.github.io/nuclei-monitor/dashboard.html)
"""
    
    with open('MONITORING_STATUS.md', 'w') as f:
        f.write(status_md)
    
    print('🏷️ Status badge updated')
    
    # Output for GitHub Actions
    github_output = os.environ.get('GITHUB_OUTPUT')
    if github_output:
        with open(github_output, 'a') as f:
            f.write(f'total_vulns={total_vulns}\n')
            f.write(f'failed_scans={failed_scans}\n')
    
    print(f'\n📊 Scan Complete!')
    print(f'   Total URLs: {len(urls)}')
    print(f'   Vulnerabilities: {total_vulns}')
    print(f'   Failed Scans: {failed_scans}')

if __name__ == '__main__':
    main()
